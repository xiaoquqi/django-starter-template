version: "3.8"

services:
  mito-api:
    image: mito:latest
    container_name: mito-api
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql://$MYSQL_USER:$MYSQL_PASSWORD@mysql:$MYSQL_PORT/$MYSQL_DATABASE}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_LOG_LEVEL: ${DJANGO_LOG_LEVEL:-INFO}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      OSS_BUCKET_NAME: ${OSS_BUCKET_NAME}
      OSS_ENDPOINT: ${OSS_ENDPOINT}
      OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID}
      OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET}
      OSS_REGION: ${OSS_REGION}
      OSS_USE_VIRTUAL_STYLE: ${OSS_USE_VIRTUAL_STYLE:-True}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      GOOGLE_OAUTH_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID}
      GOOGLE_OAUTH_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET}
      GOOGLE_OAUTH_CALLBACK_URL: ${GOOGLE_OAUTH_CALLBACK_URL}
      WECHAT_APP_ID: ${WECHAT_APP_ID}
      WECHAT_APP_SECRET: ${WECHAT_APP_SECRET}
      # Default admin user configuration
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME:-admin}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-adminpassword}
    volumes:
      - ./data/django/staticfiles:/opt/mito/core/staticfiles
      - ./cache:/opt/cache
      - ./data/logs/api:/var/log/gunicorn
      - ./mito:/opt/mito
    networks:
      - mito_network
    depends_on:
      - mysql
    command: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  mito-worker:
    image: mito:latest
    container_name: mito-worker
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql://$MYSQL_USER:$MYSQL_PASSWORD@mysql:$MYSQL_PORT/$MYSQL_DATABASE}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_LOG_LEVEL: ${DJANGO_LOG_LEVEL:-INFO}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      OSS_BUCKET_NAME: ${OSS_BUCKET_NAME}
      OSS_ENDPOINT: ${OSS_ENDPOINT}
      OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID}
      OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET}
      OSS_REGION: ${OSS_REGION}
      OSS_USE_VIRTUAL_STYLE: ${OSS_USE_VIRTUAL_STYLE:-False}
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL:-DEBUG}
    volumes:
      - ./cache:/opt/cache
      - ./data/logs/worker:/var/log/celery
      - ./mito:/opt/mito
    networks:
      - mito_network
    depends_on:
      mito-api:
        condition: service_started
      mysql:
        condition: service_started
      redis:
        condition: service_started
    command: celery

  mito-scheduler:
    image: mito:latest
    container_name: mito-scheduler
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql://$MYSQL_USER:$MYSQL_PASSWORD@mysql:$MYSQL_PORT/$MYSQL_DATABASE}
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL:-DEBUG}
    volumes:
      - ./data/logs/scheduler:/var/log/celery
      - ./mito:/opt/mito
    networks:
      - mito_network
    depends_on:
      mito-api:
        condition: service_started
      mysql:
        condition: service_started
      redis:
        condition: service_started
    command: celery-beat

  # Recommend to use nginx proxy manager to manage the outside access
  nginx:
    image: nginx:latest
    container_name: mito-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/certs:/certs
      - ./data/django/staticfiles:/staticfiles:ro
      - ./data/logs/nginx:/var/log/nginx
    ports:
      - "10080:80"
      - "10443:443"
    networks:
      - mito_network
    depends_on:
      mito-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
    image: mariadb:11.6
    container_name: mito-mariadb
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_HOST: ${MYSQL_HOST:-mysql}
      MYSQL_PORT: ${MYSQL_PORT:-3306}
    volumes:
      - ./docker/mysql/etc/my.cnf:/etc/mysql/my.cnf
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d
      - ./data/mysql/data:/var/lib/mysql
      - ./data/logs/mysql:/var/log/mysql
    networks:
      - mito_network

  redis:
    image: redis:alpine
    container_name: mito-redis
    restart: unless-stopped
    command: redis-server
    volumes:
      - ./data/redis:/data
      - ./data/logs/redis:/var/log/redis
    networks:
      - mito_network

networks:
  mito_network:
    driver: bridge
