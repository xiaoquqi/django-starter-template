openapi: 3.0.3
info:
  title: Mito API
  version: 1.0.0
  description: API documentation for Mito project
  contact:
    name: Ray Sun
    email: xiaoquqi@gmail.com
  license:
    name: MIT License
paths:
  /api/v1/auth/login:
    post:
      operationId: v1_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/v1/auth/logout:
    post:
      operationId: v1_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/change:
    post:
      operationId: v1_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/reset:
    post:
      operationId: v1_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/password/reset/confirm:
    post:
      operationId: v1_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/registration:
    post:
      operationId: v1_auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/v1/auth/registration/verify-email:
    post:
      operationId: v1_auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/auth/social/connect:
    post:
      operationId: v1_auth_social_connect_create
      description: |-
        class used for social account linking

        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookConnect(SocialConnectView):
            adapter_class = FacebookOAuth2Adapter
        -------------
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialConnectRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnect'
          description: ''
  /api/v1/auth/social/login:
    post:
      operationId: v1_auth_social_login_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /api/v1/auth/user:
    get:
      operationId: v1_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: v1_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: v1_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/v1/categories:
    get:
      operationId: v1_categories_retrieve
      description: Get a list of all categories
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayResponse_Category'
          description: ''
    post:
      operationId: v1_categories_create
      description: Create a new category
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Category'
          description: ''
  /api/v1/categories/{id}:
    get:
      operationId: v1_categories_retrieve_2
      description: Get a specific category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Category'
          description: ''
    put:
      operationId: v1_categories_update
      description: Update a specific category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Category'
          description: ''
    delete:
      operationId: v1_categories_destroy
      description: Delete a specific category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/posts:
    get:
      operationId: v1_posts_retrieve
      description: Get a list of all posts with pagination and sorting
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          default: created_at
        description: 'Order field, prefix with ''-'' for descending (default: created_at)'
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number (starts from 1)
      - in: query
        name: page_size
        schema:
          type: integer
          default: 10
        description: Number of items per page (max 100)
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_Post'
          description: ''
    post:
      operationId: v1_posts_create
      description: Create a new post
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Post'
          description: ''
  /api/v1/posts/{id}:
    get:
      operationId: v1_posts_retrieve_2
      description: Get a specific post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Post'
          description: ''
    put:
      operationId: v1_posts_update
      description: Update a specific post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_PostUpdate'
          description: ''
    delete:
      operationId: v1_posts_destroy
      description: Delete a specific post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/tags:
    get:
      operationId: v1_tags_retrieve
      description: Get a list of all tags
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayResponse_Tag'
          description: ''
    post:
      operationId: v1_tags_create
      description: Create a new tag
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Tag'
          description: ''
  /api/v1/tags/{id}:
    get:
      operationId: v1_tags_retrieve_2
      description: Get a specific tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Tag'
          description: ''
    put:
      operationId: v1_tags_update
      description: Update a specific tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleResponse_Tag'
          description: ''
    delete:
      operationId: v1_tags_destroy
      description: Delete a specific tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    ArrayResponse_Category:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: List of items
      required:
      - code
      - data
      - message
    ArrayResponse_Tag:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: List of items
      required:
      - code
      - data
      - message
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
      required:
      - id
      - name
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
      required:
      - name
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/UserDetails'
      required:
      - access
      - refresh
      - user
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PaginatedData_Post:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          description: List of items for current page
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationInfo_Post'
          description: Pagination information
      required:
      - list
      - pagination
    PaginatedResponse_Post:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          allOf:
          - $ref: '#/components/schemas/PaginatedData_Post'
          description: Paginated data
      required:
      - code
      - data
      - message
    PaginationInfo_Post:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        pageSize:
          type: integer
          description: Number of items per page
        next:
          type: string
          format: uri
          nullable: true
          description: URL to next page
        previous:
          type: string
          format: uri
          nullable: true
          description: URL to previous page
      required:
      - next
      - page
      - pageSize
      - previous
      - total
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        content:
          type: string
        author:
          type: string
          readOnly: true
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - content
      - created_at
      - id
      - title
      - updated_at
    PostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        category:
          type: string
          minLength: 1
        tags:
          type: array
          items:
            type: string
            minLength: 1
      required:
      - content
      - title
    PostUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        content:
          type: string
      required:
      - content
      - title
    PostUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
      required:
      - content
      - title
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password1
      - password2
      - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SingleResponse_Category:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          allOf:
          - $ref: '#/components/schemas/Category'
          description: Response data
      required:
      - code
      - data
      - message
    SingleResponse_Post:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          allOf:
          - $ref: '#/components/schemas/Post'
          description: Response data
      required:
      - code
      - data
      - message
    SingleResponse_PostUpdate:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          allOf:
          - $ref: '#/components/schemas/PostUpdate'
          description: Response data
      required:
      - code
      - data
      - message
    SingleResponse_Tag:
      type: object
      description: |-
        Base response wrapper for standardized API responses.

        This class defines the standard structure for all API responses
        in the system. It ensures consistency across all endpoints by
        providing a common format with code, message, and data fields.

        This wrapper is used as the base class for all response
        serializers to maintain consistent API documentation and
        response structure.

        Fields:
            code (IntegerField): Response status code indicating
                               success/failure
            message (CharField): Human-readable response message
            data (Field): The actual response data (varies by endpoint)

        Usage:
            This class is not used directly. Instead, use the response()
            functions which create subclasses of this wrapper.
      properties:
        code:
          type: integer
          description: Response status code
        message:
          type: string
          description: Response message
        data:
          allOf:
          - $ref: '#/components/schemas/Tag'
          description: Response data
      required:
      - code
      - data
      - message
    SocialConnect:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    SocialConnectRequest:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    SocialLoginRequest:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    TagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: posts
  description: Post management endpoints
- name: tags
  description: Tag management endpoints
- name: categories
  description: Category management endpoints
- name: auth
  description: Authentication endpoints
